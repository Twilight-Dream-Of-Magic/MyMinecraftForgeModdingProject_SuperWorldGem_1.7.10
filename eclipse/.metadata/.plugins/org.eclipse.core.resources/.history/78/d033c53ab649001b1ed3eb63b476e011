package twilight_magical.minecraft_forge_modding.super_world_gem.tools;

import net.minecraft.item.Item;
import net.minecraft.item.ItemTool;
import net.minecraft.item.ItemStack;

import net.minecraft.item.Item.ToolMaterial;

import net.minecraft.util.ResourceLocation;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.init.Blocks;

import net.minecraft.creativetab.CreativeTabs;

import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;

import net.minecraft.client.Minecraft;

import net.minecraft.world.World;

import net.minecraftforge.common.ForgeHooks;
import net.minecraftforge.common.util.EnumHelper;

import cpw.mods.fml.common.registry.GameRegistry;
import cpw.mods.fml.common.registry.LanguageRegistry;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;

import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Random;

import net.minecraft.item.ItemSword;
import net.minecraft.item.ItemAxe;
import net.minecraft.item.ItemPickaxe;
import net.minecraft.item.ItemSpade;

public class LoadTopSuperWorldBlockBreaker extends Item
{
	private static final int THIS_TOOLHARVEST_LEVEL = 32; // Set custom tool the harvest level
	public static final ToolMaterial SPUERWORLDTOPBLOCKBREAKER = EnumHelper.addToolMaterial("SPUERWORLDTOPBLOCKBREAKER", THIS_TOOLHARVEST_LEVEL, 20480000, 51200000.0F, 20480000F, 0);
	
	@SuppressWarnings("unused")
	public static int getThisToolHarvestLevel()
	{
		 
		if (THIS_TOOLHARVEST_LEVEL < 0 || THIS_TOOLHARVEST_LEVEL > 32)
		{
			return THIS_TOOLHARVEST_LEVEL;
		}
		else if(THIS_TOOLHARVEST_LEVEL == 0)
		{
			return SPUERWORLDTOPBLOCKBREAKER.getHarvestLevel();
		}
		else
		{
			return SPUERWORLDTOPBLOCKBREAKER.getHarvestLevel();
		}
		//return THIS_TOOLHARVEST_LEVEL * 2;
		
	}
	
	public static final Set<Block> allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue = Sets.newHashSet(new Block[]
	    	{
	    				Blocks.bedrock, Blocks.command_block, Blocks.portal, Blocks.end_portal_frame,Blocks.monster_egg, Blocks.mob_spawner
	    				//From the impossible to destroy the block, give the resistance to destroy the effect of efficiency?
	    				//来自不可能破坏的块，给予的抵抗破坏效率的效果 ？ 
	    				//This Is Allow Player To Harvest Of List For The Unbreakable Cube
	    	});
	
    public static Item TopSuperWorldBlockBreaker = new ItemToolSuperWorldBlockBreaker(0.0f, SPUERWORLDTOPBLOCKBREAKER,allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue);
    
    private static final ResourceLocation texture = new ResourceLocation("super_world_gem:textures/items/WorldBedrockTheDead.gif");

    public static class ItemToolSuperWorldBlockBreaker extends ItemTool
    {
    	public static Set<Block> BlocksEffectiveValue;
    			
    	public static final Set<Block> bannedPlayerHarvest_easyBlocksEffectiveValue = Sets.newHashSet(new Block[]
    	{
    				Blocks.air, Blocks.fire, Blocks.lava, Blocks.water, Blocks.end_portal, Blocks.flowing_lava, Blocks.flowing_water, Blocks.cake
    				//From the impossible to destroy the block?
    				//来自不可能破坏的块 ？ 
    				//This Is Not Allow Player To Harvest Of List For The Breakable Cube
    	});
    	
    	//Damage versus entities
        private float damageVsEntity = 16.0f; //public
               
        //The material this tool is made from.
        protected ToolMaterial thisToolMaterial; //public
        
        //This tool efficiency on the proper material
        protected final float eOnPM_Speed = 51200000.0F; //public
        protected float efficiencyOnProperMaterial = eOnPM_Speed; //public
        
        public float getThisEfficiencyOnProperMaterial()
        {
        	return this.efficiencyOnProperMaterial;
        }
        
        /**
         * 
         * @param damageVsEntity
         * @param material
         * @param unlocalizedName
         */
        
        protected ItemToolSuperWorldBlockBreaker(float damageVsEntity, ToolMaterial MATERIAL, Set<Block> allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue)
        {
           //Tool_SpuerWorldGemMod.TopSuperWorldAxe = new ItemTool(0.0f, SPUERWORLDTOPAXE, null);
           
           // Resource Library Path:assets\[Resource Library Name]\textures\items
           // Current Resource Library Name:super_world_gem
           // Warning! Resource Library Name Can Not Be Capital Letters!
               
           //资源库路径：assets\[Resource Library Name]\textures\items
           //当前资源库名称：super_world_gem
           // 警告！ 资源库名称不能是大写字母！
           super(damageVsEntity, MATERIAL, allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue);
           this.setTextureName("super_world_gem:WorldBedrockTheDead");
           this.setUnlocalizedName("TopSuperWorldBlockBreaker"); // unlocalizedName
           
           //Add this object object to multiple tool properties. And convert it to a tool object.
           //将这个物品对象，添加多个工具属性。并转换为工具物品对象。
           this.setHarvestLevel("sword",getThisToolHarvestLevel());
           this.setHarvestLevel("pickaxe",getThisToolHarvestLevel());
           this.setHarvestLevel("axe",getThisToolHarvestLevel());
           this.setHarvestLevel("shovel",getThisToolHarvestLevel());
           this.setHarvestLevel("SPUERWORLDTOPBLOCKBREAKER",getThisToolHarvestLevel());
           this.setMaxDamage(MATERIAL.getMaxUses()); //Set the maximum durability, the 0 value is never damaged 设置最大耐久度,值为0的话即为永不损坏
           
           this.thisToolMaterial = MATERIAL;
           this.damageVsEntity = 0.0f + MATERIAL.getDamageVsEntity();
           this.efficiencyOnProperMaterial = MATERIAL.getEfficiencyOnProperMaterial();
           this.BlocksEffectiveValue = allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue;
           this.maxStackSize = 1;
           this.setCreativeTab(CreativeTabs.tabTools); 
      
        }
        
        private HashMap<String, Integer> toolClasses = new HashMap<String, Integer>();
        
    	public boolean func_150897_b(Block block) // Function name = func_150897_b is a isBlockCanBeHarvested()
    	{
    		if(allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue.contains(block) && !block.equals(Blocks.air))
    		{
    			return true;
    		}
    		//return allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue.contains(block) ? true : this.func_150897_b(block);
    		return allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue.contains(block) ? true : true;
    	}
    	
    	/**
         * ItemStack sensitive version of {@link #canHarvestBlock(Block)}
         * @param par1Block The block trying to harvest
         * @param itemStack The itemstack used to harvest the block
         * @return true if can harvest the block
         */
    	@Override
        public boolean canHarvestBlock(Block block, ItemStack itemStack)
        {
            return this.func_150897_b(block);
        }
        
        /**
         * Metadata-sensitive version of getStrVsBlock
         * @param itemstack The Item Stack
         * @param block The block the item is trying to break
         * @param metadata The items current metadata
         * @return The damage strength of block
         */
        @Override
        public float getDigSpeed(ItemStack stack, Block block, int meta)
        {
            if(ForgeHooks.isToolEffective(stack, block, meta) == false)
            {
            	return super.getDigSpeed(stack, block, meta);
            }
            else
            {
            	return efficiencyOnProperMaterial;
            }
            
        }
        
        /**
         * Sets or removes the harvest level for the specified tool class.
         *
         * @param toolClass Class
         * @param level Harvest level:
         *     Wood:    0
         *     Stone:   1
         *     Iron:    2
         *     Diamond: 3
         *     Gold:    0
         */
        @Override
        public void setHarvestLevel(String toolClass, int level)
        {
            if (level < -1)
                toolClasses.remove(toolClass);
            else if (level == -1)
                toolClasses.put(toolClass, level);
            else if (level == 0 )
            	toolClasses.remove(toolClass);
            else if(level > 0)
            	toolClasses.put(toolClass, level);
            	
        }
        
        public String toolClass = null;

        @Override
        public Set<String> getToolClasses(ItemStack stack)
        {
        	if(toolClass != null || toolClasses != null)
        	{
        		return ImmutableSet.of("pickaxe", "shovel", "axe");
        	}
        	else
        	{
        		return super.getToolClasses(stack);
        	}
        }
        
        
        /**
         * @Notes First, the against value based on the digging speed of the given block. 
         * @Notes Then, if the value of the item stack digging speed is greater than the against value of the block digging speed.(The return value is less than or equal to 0F). Set the item's stack digging speed is equal to valid. 
         * @Notes But, if the value of the item stack digging speed is less than the against value of the block digging speed. (The return value is greater than 0F). Set the item's stack digging speed is equal to invalid. 
         * @Notes Finally, according to the above conditions, return the value of the digging speed (This item stack strength or This item stack hardness of the destructive power).
         * 
         * @Notes 首先，基于给定块的挖掘速度的反对值。
         * @Notes 然后，如果物品堆栈挖掘速度的值，大于方块挖掘速度的反对值。(返回值小于或等于0F)。那么物品堆栈挖掘速度为有效。
         * @Notes 但是，如果物品堆栈挖掘速度的值，小于方块挖掘速度的反对值。(返回值大于0F)。那么物品堆栈挖掘速度为无效。
         * @Notes 最后，根据以上条件，返回挖掘速度的值（物品堆栈强度或物品堆栈硬度的破坏力）。
         * 
         * @Notes If value equal 1.0F the dig speed of base, (Quality+1)*2 if value equal correct blocktype. If value equal 1.5F the dig speed of sword.
         * 
         * @Notes 如果返回的强度值等于1.0F基础的挖掘速度, 如果(质量+ 1)* 2 的值等于正确的块类型。如果返回的强度值等于1.5F剑的挖掘速度
         * 
         * Reverse and overload data sets are used to break through the boundaries of excavation efficiency for unbreakable cubes.
         * 反向和过载数据组，用于突破挖掘效率的界限，针对于牢不可破的立方体。
         * 
         */
        @Override
		public float func_150893_a(ItemStack stack, Block block) //Function name = func_150893_a is a getStrVsBlock() or getEfficiencyVersusBlock()
		{
           	// Reacquire, new harvest level values, applied to custom tools material. Then, a new dig speed is generated.
           	// 重新获取，新的收获水平值，应用于自定义工具材料。然后，生成新的挖掘速度。
        	
        	float myToolEfficiency = 0.0f;
        	
        	for(int DestoryBlockSpeedOverflow = 0; DestoryBlockSpeedOverflow <= allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue.toString().length(); DestoryBlockSpeedOverflow++)
        	{
        		if(this.allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue == block)
        		{
        			return efficiencyOnProperMaterial;
        		}
        		else if (block.getMaterial() == Material.wood || block.getMaterial() == Material.vine || block.getMaterial() == Material.plants)
				{
	    			return this.efficiencyOnProperMaterial;
	    		}
				else
				{
					
					if(this.allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue.contains(block) == true)
					{
						myToolEfficiency = this.efficiencyOnProperMaterial;
					}
					else if(this.allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue.contains(block) == false)
					{
						myToolEfficiency = super.func_150893_a(stack, block);
					}
					//return this.hardcoreBlocksEffectiveAgainst.contains(block) ? this.efficiencyOnProperMaterial : super.func_150893_a(stack, block);
				}
        		
        	}
        	
        	if(myToolEfficiency == 0.0f)
        	{
        		return this.allowedPlayerHarvest_hardcoreBlocksEffectiveAgainstValue.contains(block) ? this.efficiencyOnProperMaterial : super.func_150893_a(stack, block);
        	}
        	else if (myToolEfficiency == super.func_150893_a(stack, block))
        	{
        		return efficiencyOnProperMaterial;
        	}
        	
        	return efficiencyOnProperMaterial != 0.0f ? efficiencyOnProperMaterial : this.getThisEfficiencyOnProperMaterial();
	    		
   		}
        
        /**
         * Queries the harvest level of this item stack for the specifred tool class,
         * Returns -1 if this tool is not of the specified type
         *
         * @param stack This item stack instance
         * @param toolClass Tool Class
         * @return Harvest level, or -1 if not the specified tool type.
         */
        @Override
        public int getHarvestLevel(ItemStack stack, String toolClass)
        {
            int level = super.getHarvestLevel(stack, toolClass);
            if (level == 0 && toolClass != null && toolClass.equals(this.toolClass))
            {
                return this.thisToolMaterial.getHarvestLevel();
            }
            else if (level == -1 && toolClass != null && toolClass.equals(this.toolClass))
            {
                return level;
            }
            else if (level < -1 && toolClass != null && toolClass.equals(this.toolClass))
            {
                return this.thisToolMaterial.getHarvestLevel();
            }
			return level;
        }
        
        @Override
        public boolean getIsRepairable(ItemStack a, ItemStack b)
        {
        	ItemStack matches = this.toolMaterial.getRepairItemStack();
            if (matches == null && net.minecraftforge.oredict.OreDictionary.itemMatches(matches, a, false)) 
            {
            	return false;
            }
            else if(matches != null)
            {
            	return true;
            }
			return net.minecraftforge.oredict.OreDictionary.itemMatches(matches, a, false);
        }
        
    /**
     * Return the enchantability factor of the item, most of the time is based on material.
     */
    @Override
    public int getItemEnchantability()
    {
        return 64;
    }

    /**
     * Return the name for this tool's material.
     */
    public String getToolMaterialName()
    {
        return this.toString();
    }
    
        //@Override
        public boolean hitEntity(ItemStack particular1_ItemStack, EntityPlayer particular2_Player, EntityLiving particular3_EntityLiving)
        {
            particular1_ItemStack.damageItem(256, particular2_Player);
            return true;
        }
        
        //@Override
        public boolean onBlockDestroyed(ItemStack particular01_ItemStack, World particular02_World, int particular03, int particular04_posX ,int particular05_posY, int particular06_posZ, EntityLiving particular07_EntityLiving)
        {
            particular01_ItemStack.damageItem(1, particular07_EntityLiving);
            return true;
        }
        
        /**
         * Callback for item usage. If the item does something special on right clicking, he will have one of those. Return
         * True if something happen and false if it don't. This is for ITEMS, not BLOCKS
         */
        @Override
        public boolean onItemUse(ItemStack itemstack, EntityPlayer player, World world, int positionX, int positionY, int positionZ, int length, float a, float b, float c)
        {
        	super.onItemUse(itemstack, player, world, positionX, positionY, positionZ, length, a, b, c);
        	
        	Block look_this_block = world.getBlock(positionX, positionY, positionZ);
        	Item set_item = this.getItemFromBlock(look_this_block);
        	//Block block = Blocks.bedrock;
        	//Block block1 = Block.air;
        	
        	 
      	     if (!world.isRemote) //boolean value is true of result from client, boolean value is false of result from server
      	     {
      	     	if(world.blockExists(positionX, positionY, positionZ) == true && world.getBlock(positionX, positionY, positionZ) == look_this_block)
      	     	{
      	     		/**
      	     		 * Sets a block to 0 and notifies relevant systems with the block change  Args: x, y, z
      	     		 **/
      	        
      	        	if(player instanceof EntityPlayer)
      	        	{
      	        		//Forced use of air blocks to replace bedrock
          	     		//强制使用空气方块替换基岩
          	     		//world.setBlockToAir(positionX, positionY, positionZ);
      	        		
         		     	//Gives players who use this tool to add a one (bedrock) block item to inventory
         		     	//给予使用这个工具的玩家，向库存增加一个(基岩)块物品
      	        		if(look_this_block == Blocks.bedrock)
      	        		{
      	        			world.setBlockToAir(positionX, positionY, positionZ);
      	        			player.inventory.addItemStackToInventory(new ItemStack(Blocks.bedrock, 1));
      	        		}
      	        		
      	        		if(look_this_block == Blocks.obsidian)
      	        		{
      	        			world.setBlockToAir(positionX, positionY, positionZ);
      	        			player.inventory.addItemStackToInventory(new ItemStack(Blocks.obsidian, 1));
      	        		}
      	        		
      	        		if(look_this_block == Blocks.command_block)
      	        		{
      	        			world.setBlockToAir(positionX, positionY, positionZ);
      	        			player.inventory.addItemStackToInventory(new ItemStack(Blocks.command_block, 1));
      	        		}
      	        		
      	        		if(look_this_block == Blocks.dragon_egg)
      	        		{
      	        			world.setBlockToAir(positionX, positionY, positionZ);
      	        			player.inventory.addItemStackToInventory(new ItemStack(Blocks.dragon_egg, 1));
      	        		}
      	        		
      		     		if(look_this_block != Blocks.air)
      		     		{
      		     			world.setBlockToAir(positionX, positionY, positionZ);
      		     			player.inventory.addItemStackToInventory(new ItemStack(set_item, 1));
      		     		}
      		     		//world.setBlock(positionX, positionY, positionZ, block1);
      		     		itemstack.damageItem(1, player); //Reset the this tool number of using
      		     		return true;
      	     		}
      	     	}
      	     	else
      	     	{
      	     		return false;
      	     	}
      	     }
      	     return super.onItemUse(itemstack, player, world, positionX, positionY, positionZ, length, a, b, c);
      	 }
    
    // /*
    // static
	// {
        // //Item.ToolMaterial SPUERWORLDTOPBLOCKBREAKER = EnumHelper.addToolMaterial("SPUERWORLDTOPBLOCKBREAKER", 64, 20480000, 51200000.0F, 10240000F, 0);
        // TopSuperWorldBlockBreaker = new ItemPickaxe(SPUERWORLDTOPBLOCKBREAKER) //SPUERWORLDTOPBLOCKBREAKER, blocksEffectiveAgainstValue
		// {
              // public Set<String> getToolClasses(ItemStack stack) {
                  // HashMap<String, Integer> returnValue = new HashMap<String, Integer>();
                  // returnValue.put("sword", ToolHarvestLevel);
                  // returnValue.put("pickaxe", ToolHarvestLevel);
                  // returnValue.put("axe", ToolHarvestLevel);
                  // returnValue.put("shovel", ToolHarvestLevel);
                  // returnValue.put("SPUERWORLDTOPBLOCKBREAKER", ToolHarvestLevel);
                  // return returnValue.keySet();
              // }
         // }.setMaxStackSize(1).setCreativeTab(CreativeTabs.tabTools).setUnlocalizedName("TopSuperWorldBlockBreaker").setMaxDamage(102400);
    // }
    // //Item.itemRegistry.addObject(455, "MinecraftWorldDestroyer", TopSuperWorldBlockBreaker);
    // */
        
    /**
     * Current implementations of this method in child classes do not use the entry argument beside ev. They just raise
     * the damage on the stack.
     */

    @SideOnly(Side.CLIENT)

    /**
     * Returns True is the item is renderer in full 3D when hold.
     */
    @Override
    public boolean isFull3D()
    {
        return true;
    }
    
  }
    
}

         /////Mandatory Forge Code Start: [Warning!] Overridden to allow custom tool effectiveness/////
         
         /*
         
         @Override
         public void setHarvestLevel(String toolClass, int level)
         {
                if (level < 0 && level == -1)
                    toolClasses.put(toolClass, level);
                if (level == 0)
                    toolClasses.remove(toolClass);
                if (level > 0)
                    toolClasses.remove(toolClass);
                if (level != -1)
                    toolClasses.remove(toolClass);
                else
                    toolClasses.remove(toolClass);
         }
         
         @Override
         public int getHarvestLevel(ItemStack stack, String toolClass)
         {
             int level = super.getHarvestLevel(stack, toolClass);
             if (level != -1 && toolClass != null && toolClass.equals(this.toolClass))
             {
                 level = -1;
                 return level;
             }
             if(level == 0 && toolClass != null && toolClass.equals(this.toolClass))
             {
                level = -1;
                return level;
             }
             if(level == 0 && toolClass != null)
             {
                level = -1;
                return level;
             }
             if (level != -1 && toolClass == null)
             {
                 return this.toolMaterial.getHarvestLevel();
             }
             else
             {
                 return this.toolMaterial.getHarvestLevel();
             }
         }
         */
          
         /////Mandatory Forge Code End/////